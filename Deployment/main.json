{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.33.93.31351",
      "templateHash": "15936122882234913599"
    }
  },
  "parameters": {
    "resourcePrefixUser": {
      "type": "string",
      "defaultValue": "pycta",
      "metadata": {
        "description": "Prefix to use for all resources."
      }
    },
    "postgreSqlServerAdminUser": {
      "type": "string",
      "defaultValue": "postgresql_admin",
      "metadata": {
        "description": "Postgresql Server Admin User Name"
      }
    },
    "postgreSqlServerAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Postgresql Server Admin Password."
      }
    },
    "dbUserName": {
      "type": "string",
      "defaultValue": "postgresql_db_user",
      "metadata": {
        "description": "Postgresql Database - chatbotdb - User Name"
      }
    },
    "dbUserPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Postgresql Database - chatbotdb - User Password."
      }
    }
  },
  "variables": {
    "databaseName": "chatbotdb",
    "containerAppUserName": "chatbot-acr-username",
    "containerAppPassword": "chatbot-acr-password",
    "trimmedResourcePrefixUser": "[if(greater(length(parameters('resourcePrefixUser')), 5), substring(parameters('resourcePrefixUser'), 0, 5), parameters('resourcePrefixUser'))]",
    "uniString": "[toLower(substring(uniqueString(subscription().id, resourceGroup().id), 0, 5))]",
    "resourcePrefix": "[format('{0}{1}', variables('trimmedResourcePrefixUser'), variables('uniString'))]",
    "location": "[resourceGroup().location]",
    "containerRegistryName": "[format('{0}acr', variables('resourcePrefix'))]",
    "containerAppEnvName": "[format('{0}env', variables('resourcePrefix'))]",
    "containerAppName": "[format('{0}app', variables('resourcePrefix'))]",
    "logAnalyticsWorkspaceName": "[format('{0}law', variables('resourcePrefix'))]",
    "storageAccountNameStarter": "[format('{0}storage', variables('resourcePrefix'))]",
    "storageAccountName": "[toLower(replace(variables('storageAccountNameStarter'), '-', ''))]",
    "dbName": "[variables('databaseName')]"
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-11-01",
      "name": "[format('{0}KeyVault', variables('resourcePrefix'))]",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": []
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-11-01",
      "name": "[format('{0}/{1}', format('{0}KeyVault', variables('resourcePrefix')), 'x-api-key')]",
      "properties": {
        "value": "ChatbotApiKey"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', format('{0}KeyVault', variables('resourcePrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-05-01",
      "name": "[variables('storageAccountName')]",
      "location": "[variables('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/{1}', variables('storageAccountName'), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', 'chatbotappdata')]",
      "properties": {
        "publicAccess": "None"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]"
      ]
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers",
      "apiVersion": "2022-12-01",
      "name": "[format('{0}pgserver', variables('resourcePrefix'))]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard_B8ms",
        "tier": "Burstable"
      },
      "properties": {
        "createMode": "Default",
        "administratorLogin": "[parameters('postgreSqlServerAdminUser')]",
        "administratorLoginPassword": "[parameters('postgreSqlServerAdminPassword')]",
        "version": "11",
        "highAvailability": {
          "mode": "Disabled"
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-11-01",
      "name": "[format('{0}/{1}', format('{0}KeyVault', variables('resourcePrefix')), 'postgresql_admin')]",
      "properties": {
        "value": "[parameters('postgreSqlServerAdminUser')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', format('{0}KeyVault', variables('resourcePrefix')))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-11-01",
      "name": "[format('{0}/{1}', format('{0}KeyVault', variables('resourcePrefix')), 'postgresql_admin_password')]",
      "properties": {
        "value": "[parameters('postgreSqlServerAdminPassword')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', format('{0}KeyVault', variables('resourcePrefix')))]"
      ]
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
      "apiVersion": "2022-12-01",
      "name": "[format('{0}/{1}', format('{0}pgserver', variables('resourcePrefix')), variables('databaseName'))]",
      "properties": {
        "charset": "UTF8",
        "collation": "English_United States.1252"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', format('{0}pgserver', variables('resourcePrefix')))]"
      ]
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
      "apiVersion": "2022-12-01",
      "name": "[format('{0}/{1}', format('{0}pgserver', variables('resourcePrefix')), 'AllowContainerApp')]",
      "properties": {
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "255.255.255.255"
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/containerApps', variables('containerAppName'))]",
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', format('{0}pgserver', variables('resourcePrefix')))]"
      ]
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers/configurations",
      "apiVersion": "2022-12-01",
      "name": "[format('{0}/{1}', format('{0}pgserver', variables('resourcePrefix')), 'chatbotdbuser')]",
      "properties": {
        "value": "[format('CREATE USER {0} WITH PASSWORD ''{1}''; GRANT ALL PRIVILEGES ON DATABASE {2} TO {3};', parameters('dbUserName'), parameters('dbUserPassword'), variables('dbName'), parameters('dbUserName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers/databases', format('{0}pgserver', variables('resourcePrefix')), variables('databaseName'))]",
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', format('{0}pgserver', variables('resourcePrefix')))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-11-01",
      "name": "[format('{0}/{1}', format('{0}KeyVault', variables('resourcePrefix')), 'postgresql_db_user_name')]",
      "properties": {
        "value": "[parameters('dbUserName')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', format('{0}KeyVault', variables('resourcePrefix')))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-11-01",
      "name": "[format('{0}/{1}', format('{0}KeyVault', variables('resourcePrefix')), 'postgresql_db_user_password')]",
      "properties": {
        "value": "[parameters('dbUserPassword')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', format('{0}KeyVault', variables('resourcePrefix')))]"
      ]
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2022-12-01",
      "name": "[variables('containerRegistryName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "adminUserEnabled": true
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[variables('logAnalyticsWorkspaceName')]",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "defaultDataCollectionRuleResourceId": "string",
        "retentionInDays": 30,
        "features": {
          "legacy": 0,
          "searchVersion": 1,
          "enableLogAccessUsingOnlyResourcePermissions": true
        }
      }
    },
    {
      "type": "Microsoft.App/managedEnvironments",
      "apiVersion": "2023-05-01",
      "name": "[variables('containerAppEnvName')]",
      "location": "[variables('location')]",
      "properties": {
        "appLogsConfiguration": {
          "destination": "log-analytics",
          "logAnalyticsConfiguration": {
            "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName')), '2022-10-01').customerId]",
            "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName')), '2021-10-01').primarySharedKey]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-11-01",
      "name": "[format('{0}/{1}', format('{0}KeyVault', variables('resourcePrefix')), 'containerAppEnvName')]",
      "properties": {
        "value": "[variables('containerAppEnvName')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', format('{0}KeyVault', variables('resourcePrefix')))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-11-01",
      "name": "[format('{0}/{1}', format('{0}KeyVault', variables('resourcePrefix')), variables('containerAppUserName'))]",
      "properties": {
        "value": "[variables('containerAppUserName')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', format('{0}KeyVault', variables('resourcePrefix')))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-11-01",
      "name": "[format('{0}/{1}', format('{0}KeyVault', variables('resourcePrefix')), variables('containerAppPassword'))]",
      "properties": {
        "value": "[variables('containerAppPassword')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', format('{0}KeyVault', variables('resourcePrefix')))]"
      ]
    },
    {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2023-05-01",
      "name": "[variables('containerAppName')]",
      "location": "[variables('location')]",
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', variables('containerAppEnvName'))]",
        "configuration": {
          "ingress": {
            "external": true,
            "targetPort": 8080
          },
          "registries": [
            {
              "server": "[format('{0}.azurecr.io', variables('containerRegistryName'))]",
              "username": "[variables('containerAppUserName')]",
              "passwordSecretRef": "acr-password"
            }
          ],
          "secrets": [
            {
              "name": "acr-password",
              "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName')), '2023-05-01').passwords[0].value]"
            }
          ]
        },
        "template": {
          "containers": [
            {
              "name": "[variables('containerAppName')]",
              "image": "[format('{0}.azurecr.io/pythonapiapp:v1', variables('containerRegistryName'))]",
              "resources": {
                "cpu": 1,
                "memory": "2.0Gi"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/managedEnvironments', variables('containerAppEnvName'))]",
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-04-01-preview",
      "name": "[guid(resourceGroup().id, resourceId('Microsoft.App/containerApps', variables('containerAppName')), 'BlobDataContributor')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382b6b1f')]",
        "principalId": "[reference(resourceId('Microsoft.App/containerApps', variables('containerAppName')), '2023-05-01', 'full').identity.principalId]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', format('{0}KeyVault', variables('resourcePrefix')), 'add')]",
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.App/containerApps', variables('containerAppName')), '2023-05-01', 'full').identity.principalId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/containerApps', variables('containerAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', format('{0}KeyVault', variables('resourcePrefix')))]"
      ]
    }
  ]
}